import psycopg2
import telebot
from telebot import types

# Establish connection to the PostgreSQL database
try:
    conn = psycopg2.connect(
        dbname="postgres",
        user="postgres",
        password="123",
        host="localhost",
        port="5432"
    )

    if conn.closed:
        print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")
    else:
        print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–æ.")
    conn.close()
except psycopg2.Error as e:
    print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", e)

# Establish connection to the PostgreSQL database
try:
    conn = psycopg2.connect(
        dbname="postgres",
        user="postgres",
        password="123",
        host="localhost",
        port="5432"
    )
    cur = conn.cursor()
    cur.execute(
        "SELECT var1, var2, var3, var4, var5, var6, var7, var8, var9, var10, var11, var12, var13, var14, var15 FROM my_table_0")
    rows = cur.fetchall()

    if rows:
        print("–ó–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        for row in rows:
            print(row)
    else:
        print("–í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")

    cur.close()
    conn.close()
except psycopg2.Error as e:
    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", e)

# Connect to the PostgreSQL database
conn = psycopg2.connect(
    dbname="postgres",
    user="postgres",
    password="123",
    host="localhost",
    port="5432"
)

cur = conn.cursor()

# Create a table with boolean variables
cur.execute("""
    CREATE TABLE IF NOT EXISTS my_table_0 (
        var1 BOOLEAN DEFAULT TRUE,
        var2 BOOLEAN DEFAULT TRUE,
        var3 BOOLEAN DEFAULT TRUE,
        var4 BOOLEAN DEFAULT TRUE,
        var5 BOOLEAN DEFAULT TRUE,
        var6 BOOLEAN DEFAULT TRUE,
        var7 BOOLEAN DEFAULT TRUE,
        var8 BOOLEAN DEFAULT TRUE,
        var9 BOOLEAN DEFAULT TRUE
    );
""")

conn.commit()
cur.execute("""
    CREATE TABLE IF NOT EXISTS my_table_inf_0 (
    str1 VARCHAR(255),
    str2 VARCHAR(255),
    str3 VARCHAR(255),
    str4 VARCHAR(255),
    str5 VARCHAR(255),
    str6 VARCHAR(255),
    str7 VARCHAR(255),
    str8 VARCHAR(255),
    str9 VARCHAR(255)
    );
""")
conn.commit()
# Close the cursor
cur.close()

# Initialize the Telegram bot
bot = telebot.TeleBot('6743095111:AAGX1CK82sdKOdUQR8W4UUXYqfRUSW5Sp08')
user_states = {}


# Function to get variable statuses from the database



# Handler for the /start command
@bot.message_handler(commands=['start'])
def start(message):
    user_states[message.chat.id] = 'awaiting_password'
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')


# Handler for entering the password
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'awaiting_password')
def check_password(message):
    if message.text.strip() == '123':
        user_states[message.chat.id] = 'authenticated'
        # Send the menu to the user after successful authentication
        send_menu(message.chat.id)
    else:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')





# Function to send the menu
def send_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add(types.KeyboardButton('–£–∑–Ω–∞—Ç—å —Å–≤–æ–µ –∏–º—è'),
               types.KeyboardButton('–£–∑–Ω–∞—Ç—å —Å–≤–æ–π id'),
               types.KeyboardButton('–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª'))
    bot.send_message(chat_id, '–ú–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:', reply_markup=markup)



# Handler for the /name command
@bot.message_handler(func=lambda message: message.text == '–£–∑–Ω–∞—Ç—å —Å–≤–æ–µ –∏–º—è')
def info_name(message):
    bot.send_message(message.chat.id, f"{message.from_user.first_name} {message.from_user.last_name}")


# Handler for the /id command
@bot.message_handler(func=lambda message: message.text == '–£–∑–Ω–∞—Ç—å —Å–≤–æ–π id')
def info_id(message):
    bot.send_message(message.chat.id, f'ID:{message.from_user.id} ')




# Function to get variable statuses from the database
def get_var_statuses(day_number):
    conn = psycopg2.connect(
        dbname="postgres",
        user="postgres",
        password="123",
        host="localhost",
        port="5432"
    )
    print(day_number)
    cur = conn.cursor()
    cur.execute(f"SELECT var1, var2, var3, var4, var5, var6, var7, var8, var9 FROM my_table_{day_number}")

    row = cur.fetchone()
    print(row)
    print(row)
    print(row)
    print(row)
    conn.commit()
    cur.close()
    return row







# Handler for the /button command

def send_buttons(message,day_number):

    print('11', day_number)
    var_statuses = get_var_statuses(day_number)

    markup = types.InlineKeyboardMarkup(row_width=3)
    buttons = []

    for i, var_status in enumerate(var_statuses[0:], start=1):
        color = 'üü¢ –°–≤–æ–±–æ–¥–Ω–æ' if var_status else 'üî¥ –ó–∞–Ω—è—Ç'
        button_text = f"–°—Ç–æ–ª {i} {color}"
        button_callback_data = f"btn{i}"
        button = types.InlineKeyboardButton(text=button_text, callback_data=button_callback_data)
        buttons.append(button)

    markup.add(*buttons)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª:", reply_markup=markup)






# Callback handler for button presses
var_num = None  # –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
day_number = None
# Callback handler for button presses
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    global var_num
    global day_number

    if call.data.startswith("calen"):
        day_number = int(call.data.split("_1")[-1])
        send_buttons(call.message, day_number)  # Pass day_number as an argument here
        print('33')

    if call.data == 'new_button_20':
        send_calendar(call.message)

    if call.data.startswith("btn"):

        print('22', day_number)
        var_num = int(call.data.replace("btn", ""))

        button_number = int(call.data[3:])  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∫–Ω–æ–ø–∫–∏ –∏–∑ call.data
        var_statuses = get_var_statuses(day_number)
        if var_statuses[button_number - 1]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
            send_additional_buttons(call.message)
        else:
            send_more_buttons(call.message)  # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –∫—Ä–∞—Å–Ω–∞—è, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫—Ä–∞—Å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    elif call.data == 'new_button_1':  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "new_button_1"
        if var_num is not None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ var_num
            update_var_status(var_num,day_number)
            bot.answer_callback_query(call.id, "—Å—Ç–æ–ª –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω")  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
            reserve_table(call)

        else:
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞")  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
    elif call.data == 'new_button_3':  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "new_button_3"
        if var_num is not None:
            update_var_status(var_num, day_number)
            bot.answer_callback_query(call.id, "–±—Ä–æ–Ω—å —Å–Ω—è—Ç–∞")  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
            send_more_buttons1(call.message)
    elif call.data == 'new_button_7':  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "new_button_7"
        if var_num is not None:
            show_reservation_info(call)
        else:
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞")
    elif call.data == 'new_button_5':
         send_buttons(call.message,day_number)
    else:
        if call.data == 'new_button_2':
            send_buttons(call.message,day_number)
        if call.data == 'new_button_4':
            send_buttons(call.message,day_number)





# Function to send additional buttons
def send_additional_buttons(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª", callback_data="new_button_1"),
               types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å—Ç–æ–ª", callback_data="new_button_2"),
               types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å", callback_data="new_button_20"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup)

def send_more_buttons(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton("–°–Ω—è—Ç—å –±—Ä–æ–Ω—å", callback_data="new_button_3"),
               types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å—Ç–æ–ª", callback_data="new_button_4"),
               types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å", callback_data="new_button_20"),
               types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data="new_button_7"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup)

def send_more_buttons1(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton("–î–∞", callback_data="new_button_5"),
               types.InlineKeyboardButton("–ù–µ—Ç", callback_data="new_button_6"))
    bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Å—Ç–æ–ª?", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª')
def send_calendar(message):
    markup = types.InlineKeyboardMarkup(row_width=3)
    markup.add(types.InlineKeyboardButton("–î–µ–Ω—å1", callback_data="calen_button_10"),
               types.InlineKeyboardButton("–î–µ–Ω—å2", callback_data="calen_button_11"),
               types.InlineKeyboardButton("–î–µ–Ω—å3", callback_data="calen_button_12"),
               types.InlineKeyboardButton("–î–µ–Ω—å4", callback_data="calen_button_13"),
               types.InlineKeyboardButton("–î–µ–Ω—å5", callback_data="calen_button_14"),
               types.InlineKeyboardButton("–î–µ–Ω—å6", callback_data="calen_button_15"),
               types.InlineKeyboardButton("–î–µ–Ω—å7", callback_data="calen_button_16"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=markup)

# Function to update the status of the variable in the database
def update_var_status(var_num,day_number):
    print(day_number)
    conn = psycopg2.connect(
        dbname="postgres",
        user="postgres",
        password="123",
        host="localhost",
        port="5432"
    )
    cur = conn.cursor()
    cur.execute(f"UPDATE my_table_{day_number} SET var{var_num} = NOT var{var_num}")
    conn.commit()
    cur.close()

print(var_num)
# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–æ–ª–∞
def save_reservation_info(message):
    global var_num
    print(var_num)
    if var_num is not None:
        reservation_info = message.text.strip()

        conn = psycopg2.connect(
            dbname="postgres",
            user="postgres",
            password="123",
            host="localhost",
            port="5432"
        )
        cur = conn.cursor()

        try:
            cur.execute(f"UPDATE my_table_inf_{day_number} SET str{var_num} = '{reservation_info}'")
            conn.commit()
            cur.close()
            print(f"–ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π str{var_num}: {reservation_info}")

            bot.send_message(message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
            send_more_buttons1(message)
        except psycopg2.Error as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", e)
            conn.rollback()  # –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            cur.close()
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª"
def reserve_table(call):
    global var_num
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∞:")
    bot.register_next_step_handler(call.message, save_reservation_info)



try:
    conn = psycopg2.connect(
        dbname="postgres",
        user="postgres",
        password="123",
        host="localhost",
        port="5432"
    )
    cur = conn.cursor()
    cur.execute(
          f"SELECT str1, str2, str3, str4, str5, str6, str7, str8, str9 FROM my_table_inf_{day_number}")
    rows = cur.fetchall()

    if rows:
        print("–ó–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        for row in rows:
            print(row)
    else:
        print("–í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")

    cur.close()
    conn.close()
except psycopg2.Error as e:
    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", e)


def show_reservation_info(call):
    print(day_number, "wewe")
    print("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è show_reservation_info")
    global var_num
    print(var_num)
    if var_num is None:
        bot.send_message(call.message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞")
        return

    conn = psycopg2.connect(
        dbname="postgres",
        user="postgres",
        password="123",
        host="localhost",
        port="5432"
    )
    cur = conn.cursor()
    cur.execute(f"SELECT str{var_num} FROM my_table_inf_{day_number}")
    row = cur.fetchone()
    conn.commit()
    cur.close()

    if row:
        bot.send_message(call.message.chat.id, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {row[0]}")
        print(row[0])
    else:
        bot.send_message(call.message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")








# Start the bot
bot.polling(none_stop=True)
